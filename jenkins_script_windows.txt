REM
REM Copyright (C) 2011-13, DyND Developers
REM BSD 2-Clause License, see LICENSE.txt
REM
REM
REM This is a Jenkins build + test script that builds
REM the DyND Python bindings, runs its tests, then
REM creates a conda package from the build.
REM
REM Platform: Windows 64-bit batch file
REM
REM For 32-bit Windows, change:
REM  - "Program Files (x86)" to just "Program Files"
REM  - "amd64" to "x86"
REM  - "Visual Studio 10 Win64" to "Visual Studio 10"
REM  - "x64" to "Win32"
REM
REM Requirements: Anaconda must be installed in ~/anaconda
REM

REM Jenkins has '/' in its workspace. Fix it to '\' for the DOS commands
set WORKSPACE=%WORKSPACE:/=\%

REM Configure the appropriate visual studio command line environment
call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" amd64
echo on

REM Check out DyND in the directory structure. In the future,
REM maybe change this to depend on the results of another Jenkins
REM build.
rd /q /s libraries
mkdir libraries
pushd libraries
git clone https://github.com/ContinuumIO/dynd.git
popd

REM Remove the previous build files, start from scratch each time.
rd /q /s build
mkdir build

REM Create a conda environment for the build, and put it
REM at the front of the path so the CMake configuration
REM finds it.
export PYENV_PREFIX=%WORKSPACE%/build/pyenv
call conda create --yes -p %PYENV_PREFIX% cython scipy
echo on
set PATH=%PYENV_PREFIX%;%PYENV_PREFIX%Scripts;%PATH%

REM Build, and install into the conda environment we created
cd build
cmake -DCMAKE_INSTALL_PREFIX=install -G "Visual Studio 10 Win64" ..
devenv dynd-python.sln /Build "RelWithDebInfo|x64"
devenv dynd-python.sln /Build "RelWithDebInfo|x64" /Project INSTALL

REM Run the tests and generate xml results
python -c "import dynd;dynd.test(xunitfile='../pydynd_tests.xml', exit=1)"

REM Get the version number and process it into a suitable form
FOR /F "delims=" %%i IN ('python -c "import dynd;print(dynd.__version_string__)"') DO set PYDYND_VERSION=%%i
set PYDYND_VERSION=%PYDYND_VERSION:-=_%
set PYDYND_VERSION=%PYDYND_VERSION:~1%

echo Version %PYDYND_VERSION%

cd %WORKSPACE%

RM Put the conda package by itself in the directory pkgs
cd ..
rd /q /s pkgs
mkdir pkgs
cd pkgs

# Create a conda package from the build
call conda package -p %PYENV_PREFIX% --pkg-name=dynd --pkg-version=%PYDYND_VERSION%
echo on
cd ..

